{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1npc0LuQzqKPVfVabO81hBrUJbjStrz1U","timestamp":1708843836045},{"file_id":"1NmuBCd7-fHbhAnb12O-ZT__vyHhMXGS9","timestamp":1708843539280}],"collapsed_sections":["Pc6T7j5hW7Qe","fw1fItMEUWqJ"],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# ***Implementation of a perceptron in Tensor Flow/Keras Enviornment***\n"],"metadata":{"id":"-aAZ6x3ncFmI"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers"],"metadata":{"id":"fz6RPDrOoDW7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = tf.keras.datasets.mnist.load_data()\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K59q6MYxoPe7","executionInfo":{"status":"ok","timestamp":1707729838766,"user_tz":-330,"elapsed":2,"user":{"displayName":"PRIYAM PAL","userId":"11237166932078787097"}},"outputId":"0ff1f682-0acb-43c4-fe96-7616193e4041"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((array([[[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]],\n","  \n","         [[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]],\n","  \n","         [[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]],\n","  \n","         ...,\n","  \n","         [[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]],\n","  \n","         [[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]],\n","  \n","         [[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]]], dtype=uint8),\n","  array([5, 0, 4, ..., 5, 6, 8], dtype=uint8)),\n"," (array([[[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]],\n","  \n","         [[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]],\n","  \n","         [[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]],\n","  \n","         ...,\n","  \n","         [[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]],\n","  \n","         [[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]],\n","  \n","         [[0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          ...,\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0],\n","          [0, 0, 0, ..., 0, 0, 0]]], dtype=uint8),\n","  array([7, 2, 1, ..., 4, 5, 6], dtype=uint8)))"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# Load and preprocess the image dataset (e.g., MNIST)\n","(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n","\n","#Normalisation of the Data\n","x_train, x_test = x_train / 255.0, x_test / 255.0"],"metadata":{"id":"1jTeSYbnoDUK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define perceptron model\n","model = tf.keras.Sequential([\n","    layers.Flatten(input_shape=(28, 28)),\n","    layers.Dense(128, activation='relu'),\n","    layers.Dense(10, activation='softmax')\n","])"],"metadata":{"id":"xXG5-gpToDRj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Compile the model\n","model.compile(optimizer='sgd',\n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])"],"metadata":{"id":"KKruRiGXoDOz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train the model\n","model.fit(x_train, y_train, epochs=10, verbose=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9IqyZS8BoDL9","executionInfo":{"status":"ok","timestamp":1707729881906,"user_tz":-330,"elapsed":40859,"user":{"displayName":"PRIYAM PAL","userId":"11237166932078787097"}},"outputId":"4eb26322-89e7-4c37-b46f-729e7162e81c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7847882933a0>"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# Evaluate the model\n","test_loss, test_acc = model.evaluate(x_test, y_test)\n","print(f\"Accuracy: {test_acc * 100:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tmje6hrvcQRh","executionInfo":{"status":"ok","timestamp":1707729883805,"user_tz":-330,"elapsed":1903,"user":{"displayName":"PRIYAM PAL","userId":"11237166932078787097"}},"outputId":"ad4d5dce-69a9-4f7e-d494-891fc1c66ad6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 2ms/step - loss: 0.1660 - accuracy: 0.9520\n","Accuracy: 95.20%\n"]}]},{"cell_type":"code","source":["print(\"Enter the initial weights: \")\n","w=[]\n","for i in range(5):\n","  a = float(input())\n","  w.append(a)\n","w"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ptn-qw9WquBg","executionInfo":{"status":"ok","timestamp":1707731265667,"user_tz":-330,"elapsed":12173,"user":{"displayName":"PRIYAM PAL","userId":"11237166932078787097"}},"outputId":"c65ff8b7-0ae1-4531-e642-990045471e78"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the initial weights: \n","0.1\n","0.2\n","0.3\n","0.1\n","0.5\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.1, 0.2, 0.3, 0.1, 0.5]"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["perceptron = tf.keras.Sequential([\n","    tf.keras.layers.Dense(units=1, input_shape=(5,), activation='sigmoid',kernel_initializer=tf.constant_initializer(w))\n","])\n","perceptron.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","perceptron.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UZ1aH6ivtr6b","executionInfo":{"status":"ok","timestamp":1707731270992,"user_tz":-330,"elapsed":464,"user":{"displayName":"PRIYAM PAL","userId":"11237166932078787097"}},"outputId":"5763ec4b-6b5c-4390-a9f0-1d24256bb805"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_10\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_17 (Dense)            (None, 1)                 6         \n","                                                                 \n","=================================================================\n","Total params: 6 (24.00 Byte)\n","Trainable params: 6 (24.00 Byte)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import OneHotEncoder\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense"],"metadata":{"id":"YU0rm5cFtuU9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target.reshape(-1, 1)\n","\n","# One-hot encode the target variable\n","encoder = OneHotEncoder(sparse=False)\n","y = encoder.fit_transform(y)\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IIctjRn6wwDK","executionInfo":{"status":"ok","timestamp":1709517460949,"user_tz":-330,"elapsed":34,"user":{"displayName":"AIML-29 Sagar Das","userId":"01630099064197628041"}},"outputId":"8eda2d15-0196-4a36-9546-e6b08a028146"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["def perceptron_model(input_shape):\n","    model = Sequential([\n","        Dense(units=10, activation='relu', input_shape=(input_shape,)),\n","        Dense(units=3, activation='softmax')\n","    ])\n","    return model"],"metadata":{"id":"LSODCIaYx1lo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create an instance of the model\n","model = perceptron_model(X_train.shape[1])"],"metadata":{"id":"iveKrNbBL3f1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Compile the model\n","model.compile(optimizer='adam',\n","              loss='categorical_crossentropy',  # Change loss to categorical_crossentropy\n","              metrics=['accuracy'])"],"metadata":{"id":"qyw37rmQyx0R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train the model\n","model.fit(X_train, y_train, epochs=10, verbose=0)\n"],"metadata":{"id":"6pJd2kvq0PMA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709517581692,"user_tz":-330,"elapsed":3263,"user":{"displayName":"AIML-29 Sagar Das","userId":"01630099064197628041"}},"outputId":"fed96029-f10d-4f49-9106-974b85b2a0fc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7f91881bd3f0>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# Evaluate the model\n","test_loss, test_acc = model.evaluate(X_test, y_test)\n","print(f\"Accuracy: {test_acc * 100:.2f}%\")"],"metadata":{"id":"zigv1Yp20Sxg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709517592924,"user_tz":-330,"elapsed":1416,"user":{"displayName":"AIML-29 Sagar Das","userId":"01630099064197628041"}},"outputId":"f7520221-81a6-4f3f-bfeb-7407fb3f0fb8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 1s 510ms/step - loss: 0.8217 - accuracy: 0.6000\n","Accuracy: 60.00%\n"]}]}]}