# -*- coding: utf-8 -*-
"""Gradient Descent, Vector, Tensor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YqtvcOeSYE3xk99kMC1scvYDshFFg5nr

#**Gradient Descent**
"""

x_old = 2
y = 2 * x_old
l_rate = 0.1
x_new = x_old - (l_rate * y)
print(x_new)

x_old = 2
y = 2 * x_old
l_rate = 0.01
for i in range(100):
    x_new = x_old - (l_rate * y)
    x_old = x_new
    y = 2*x_old
    print(x_new)

"""#**Scaler, Vector, Matrix, and Tensor**"""

import numpy as np

weights = np.random.rand(3,3)
print(weights)

np.random.seed(40)
weights = np.random.rand(3,3)
print(weights)

"""#**Adding two vectors using Tensorflow**"""

import tensorflow as tf

# Define two vectors
vector1 = tf.constant([1.0, 2.0, 3.0], dtype = tf.float32)
vector2 = tf.constant([4.0, 5.0, 6.0], dtype = tf.float32)

# Add the vectors
result = tf.add(vector1, vector2)

# Print the result
print("Result:", result.numpy())

# Set a random seed for reproducibility
np.random.seed(42)
# Generate random vectors
vector1 = tf.constant(np.random.rand(4624, 1), dtype=tf.float32)
vector2 = tf.constant(np.random.rand(4624, 1), dtype=tf.float32)
# Add the vectors
result = tf.add(vector1, vector2)
# Print the result
print("Vector1:")
print(vector1.numpy())
print("\nVector2:")
print(vector2.numpy())
print("\nResult:")
print(result.numpy())