# -*- coding: utf-8 -*-
"""Image Convolution

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mgiVeoJuuqnRdOdpUJrz-sLksycAFN64

# Image Convolution for Edge Detection and Feature Extraction
"""

import numpy as np

# Define the 6x6 image
image = np.random.rand(6, 6)
print(image)
print()
kernel = np.array([[1, 0, -1],
                   [1, 0, -1],
                   [1, 0, -1]])

print(kernel)
def convolve(image, kernel):
    img_height, img_width = image.shape
    kernel_height, kernel_width = kernel.shape
    output_height = img_height - kernel_height + 1
    output_width = img_width - kernel_width + 1
    output = np.zeros((output_height, output_width))

    for i in range(output_height):
        for j in range(output_width):
            output[i, j] = np.sum(image[i:i+kernel_height, j:j+kernel_width] * kernel)

    return output


convolved_output = convolve(image, kernel)
print()
print("Convolved Output:")
print(convolved_output)

import numpy as np
from scipy.signal import convolve2d

# Define the 6x6 image
image = np.random.rand(6, 6)
print("Image:")
print(image)
print()

# Define the kernel
kernel = np.array([[1, 0, -1],
                   [1, 0, -1],
                   [1, 0, -1]])
print("Kernel:")
print(kernel)
print()

# Perform convolution
convolved_output = convolve2d(image, kernel, mode='valid')
print("Convolved Output:")
print(convolved_output)

"""With Padding and stride"""

import numpy as np

# Define the 6x6 image
image = np.random.rand(6, 6)
print("Image:")
print(image)
print()

kernel = np.array([[1, 0, -1],
                   [1, 0, -1],
                   [1, 0, -1]])
print("Kernel:")
print(kernel)
print()

def convolve(image, kernel, padding=0, stride=1):
    img_height, img_width = image.shape
    kernel_height, kernel_width = kernel.shape
    output_height = ((img_height + 2 * padding - kernel_height) // stride) + 1
    output_width = ((img_width + 2 * padding - kernel_width) // stride) + 1
    output = np.zeros((output_height, output_width))

    # Add padding to the input image
    padded_image = np.pad(image, ((padding, padding), (padding, padding)), mode='constant')

    for i in range(0, img_height + 2 * padding - kernel_height + 1, stride):
        for j in range(0, img_width + 2 * padding - kernel_width + 1, stride):
            output[i // stride, j // stride] = np.sum(padded_image[i:i+kernel_height, j:j+kernel_width] * kernel)

    return output

# Perform convolution with padding = 1 and stride = 2
convolved_output = convolve(image, kernel, padding=1, stride=2)
print()
print("Convolved Output with Padding and Stride:")
print(convolved_output)