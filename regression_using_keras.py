# -*- coding: utf-8 -*-
"""Regression Using Keras

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gqCHiCBcDhy8yntTLCDdcstOmEocWr4N
"""

import pandas as pd
import numpy as np
import tensorflow as tf

data = pd.read_csv('forestfires.csv')
data

data.info()

data.describe()

data.isnull().sum()

data.columns

data['month'].nunique()

data['day'].nunique()

# Assuming 'data' is your DataFrame
data = data.drop('day', axis=1)
data

from sklearn.preprocessing import LabelEncoder


label_encoder = LabelEncoder()
data['month'] = label_encoder.fit_transform(data['month'])

data

def remove_outliers(df, columns):
    for col in columns:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
    return df

data = remove_outliers(data, ['X', 'Y', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain'])
data

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense

# Assuming 'data' is your DataFrame
X = data.drop('area', axis=1).values
y = data['area'].values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Build the Linear Regression model using Keras
model = Sequential()
model.add(Dense(1, input_dim=X_train.shape[1], activation='linear'))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, verbose=1)

# Make predictions on the test set
y_pred = model.predict(X_test_scaled)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create and train the linear regression model
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test_scaled)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import numpy as np

# Define XOR data
x_train = np.array([[0, 0],
                    [0, 1],
                    [1, 0],
                    [1, 1]])

y_train = np.array([0, 1, 1, 0])

# Define the logistic regression model
model = Sequential()
model.add(Dense(1, input_dim=2, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=1000, verbose=0)

# Evaluate the model on the training data
loss, accuracy = model.evaluate(x_train, y_train)
print(f"Accuracy: {accuracy * 100:.2f}%")

#Another Way
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split

# XOR input and labels
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=np.float32)
y = np.array([[0], [1], [1], [0]], dtype=np.float32)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Define the neural network architecture
model = tf.keras.Sequential([
    tf.keras.layers.Dense(units=4, input_dim=2, activation='sigmoid'),  # Hidden layer with 4 neurons and sigmoid activation
    tf.keras.layers.Dense(units=1, activation='sigmoid')  # Output layer with 1 neuron and sigmoid activation
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=500, verbose=0)

# Evaluate the model on the test set
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Loss: {loss:.4f}, Test Accuracy: {accuracy:.4f}')

# Make predictions
predictions = model.predict(X_test)
rounded_predictions = np.round(predictions)

# Print the predictions
print("\nPredictions:")
print(rounded_predictions)

# Print the probability scores
print("\nProbability Scores:")
print(predictions)