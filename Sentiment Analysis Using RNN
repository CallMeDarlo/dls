{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":7465,"status":"ok","timestamp":1714388068702,"user":{"displayName":"AIML-29 Sagar Das","userId":"01630099064197628041"},"user_tz":-330},"id":"MZVqHHldadij","outputId":"25165963-6145-4433-8daf-4fe722ef5ec7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of x_train: (25000,)\n","Shape of y_train: (25000,)\n","Shape of x_test: (25000,)\n","Shape of y_test: (25000,)\n","Class Distribution: {0: 25000, 1: 25000}\n","Average Length of Reviews: 234.75892\n","Minimum Length of Reviews: 7\n","Maximum Length of Reviews: 2494\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Top 20 Most Common Words:\n","4: 666757\n","2: 638669\n","5: 324337\n","6: 322800\n","7: 289379\n","8: 268079\n","9: 211041\n","10: 201951\n","11: 186690\n","12: 156801\n","13: 154887\n","14: 150941\n","15: 136986\n","16: 95585\n","17: 91730\n","18: 87450\n","19: 87350\n","20: 87050\n","21: 83495\n","22: 77678\n","Number of Positive Reviews: 25000\n","Number of Negative Reviews: 25000\n"]}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.datasets import imdb\n","\n","# Load the IMDB dataset\n","vocab_size = 10000\n","(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=vocab_size)\n","\n","# Combine train and test sets for analysis\n","x = np.concatenate((x_train, x_test), axis=0)\n","y = np.concatenate((y_train, y_test), axis=0)\n","\n","# Dataset Overview\n","print(\"Shape of x_train:\", x_train.shape)\n","print(\"Shape of y_train:\", y_train.shape)\n","print(\"Shape of x_test:\", x_test.shape)\n","print(\"Shape of y_test:\", y_test.shape)\n","\n","# Class Distribution\n","unique, counts = np.unique(y, return_counts=True)\n","class_distribution = dict(zip(unique, counts))\n","print(\"Class Distribution:\", class_distribution)\n","\n","# Text Length Distribution\n","review_lengths = [len(review) for review in x]\n","print(\"Average Length of Reviews:\", np.mean(review_lengths))\n","print(\"Minimum Length of Reviews:\", np.min(review_lengths))\n","print(\"Maximum Length of Reviews:\", np.max(review_lengths))\n","\n","plt.figure(figsize=(8, 6))\n","plt.hist(review_lengths, bins=50, color='skyblue', edgecolor='black')\n","plt.title('Text Length Distribution')\n","plt.xlabel('Length of Reviews')\n","plt.ylabel('Frequency')\n","plt.show()\n","\n","# Word Frequency Analysis\n","word_counts = {}\n","for review in x:\n","    for word in review:\n","        if word not in word_counts:\n","            word_counts[word] = 1\n","        else:\n","            word_counts[word] += 1\n","\n","sorted_word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n","top_words = sorted_word_counts[:20]\n","\n","print(\"Top 20 Most Common Words:\")\n","for word, count in top_words:\n","    print(f\"{word}: {count}\")\n","\n","# Sentiment Analysis\n","positive_reviews = x[y == 1]\n","negative_reviews = x[y == 0]\n","\n","print(\"Number of Positive Reviews:\", len(positive_reviews))\n","print(\"Number of Negative Reviews:\", len(negative_reviews))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7rqk8pRybIBM","executionInfo":{"status":"ok","timestamp":1714387536960,"user_tz":-330,"elapsed":218001,"user":{"displayName":"AIML-29 Sagar Das","userId":"01630099064197628041"}},"outputId":"8c2b95cb-174a-4753-9853-9d6c15f1f04f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17464789/17464789 [==============================] - 1s 0us/step\n","Epoch 1/5\n","313/313 [==============================] - 91s 271ms/step - loss: 0.6923 - accuracy: 0.5175 - val_loss: 0.6811 - val_accuracy: 0.5608\n","Epoch 2/5\n","313/313 [==============================] - 66s 211ms/step - loss: 0.6221 - accuracy: 0.6776 - val_loss: 0.6758 - val_accuracy: 0.6020\n","Epoch 3/5\n","313/313 [==============================] - 61s 196ms/step - loss: 0.4896 - accuracy: 0.7656 - val_loss: 0.4655 - val_accuracy: 0.8048\n","Epoch 4/5\n","313/313 [==============================] - 60s 192ms/step - loss: 0.3541 - accuracy: 0.8519 - val_loss: 0.5715 - val_accuracy: 0.7004\n","Epoch 5/5\n","313/313 [==============================] - 60s 191ms/step - loss: 0.5322 - accuracy: 0.7354 - val_loss: 0.6259 - val_accuracy: 0.6306\n","782/782 [==============================] - 15s 19ms/step - loss: 0.6203 - accuracy: 0.6374\n","Test Loss: 0.6203092932701111, Test Accuracy: 0.6373599767684937\n"]}],"source":["# Implementation using RNN\n","import tensorflow as tf\n","from tensorflow.keras.datasets import imdb\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Embedding, SimpleRNN, Dense\n","\n","# Load the IMDB dataset\n","vocab_size = 10000\n","(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=vocab_size)\n","\n","# Pad sequences to ensure uniform length\n","max_length = 200\n","x_train = pad_sequences(x_train, maxlen=max_length)\n","x_test = pad_sequences(x_test, maxlen=max_length)\n","\n","# Define RNN model\n","embedding_dim = 16\n","model = Sequential([\n","    Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=max_length),\n","    SimpleRNN(units=64),\n","    Dense(units=1, activation='sigmoid')\n","])\n","\n","# Compile model\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# Train the model\n","model.fit(x_train, y_train, epochs=5, batch_size=64, validation_split=0.2)\n","\n","# Evaluate the model\n","loss, accuracy = model.evaluate(x_test, y_test)\n","print(f'Test Loss: {loss}, Test Accuracy: {accuracy}')"]},{"cell_type":"code","source":["from tensorflow.keras.layers import Embedding, LSTM, Dense\n","from tensorflow.keras.models import Sequential\n","\n","vocab_size = 10000  # Example vocabulary size\n","embedding_dim = 128  # Example embedding dimension\n","maxlen = 100  # Example maximum length of input sequences\n","lstm_units = 64  # Example number of LSTM units\n","\n","model = Sequential()\n","model.add(Embedding(vocab_size, embedding_dim, input_length=maxlen))\n","model.add(LSTM(lstm_units))\n","model.add(Dense(1, activation='sigmoid'))"],"metadata":{"id":"V6wXLIuLgl83"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}