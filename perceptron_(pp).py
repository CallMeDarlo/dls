# -*- coding: utf-8 -*-
"""Perceptron (PP)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zQzwWgKaj6MJLRC-ahpASXOP9JtnAEXO

# ***Implementation of a perceptron in Tensor Flow/Keras Enviornment***
"""

import tensorflow as tf
from tensorflow.keras import layers

data = tf.keras.datasets.mnist.load_data()
data

# Load and preprocess the image dataset (e.g., MNIST)
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

#Normalisation of the Data
x_train, x_test = x_train / 255.0, x_test / 255.0

# Define perceptron model
model = tf.keras.Sequential([
    layers.Flatten(input_shape=(28, 28)),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='sgd',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=10, verbose=0)

# Evaluate the model
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"Accuracy: {test_acc * 100:.2f}%")

print("Enter the initial weights: ")
w=[]
for i in range(5):
  a = float(input())
  w.append(a)
w

perceptron = tf.keras.Sequential([
    tf.keras.layers.Dense(units=1, input_shape=(5,), activation='sigmoid',kernel_initializer=tf.constant_initializer(w))
])
perceptron.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
perceptron.summary()

import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load the Iris dataset
iris = load_iris()
X = iris.data
y = iris.target.reshape(-1, 1)

# One-hot encode the target variable
encoder = OneHotEncoder(sparse=False)
y = encoder.fit_transform(y)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

def perceptron_model(input_shape):
    model = Sequential([
        Dense(units=10, activation='relu', input_shape=(input_shape,)),
        Dense(units=3, activation='softmax')
    ])
    return model

# Create an instance of the model
model = perceptron_model(X_train.shape[1])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',  # Change loss to categorical_crossentropy
              metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, verbose=0)

# Evaluate the model
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"Accuracy: {test_acc * 100:.2f}%")